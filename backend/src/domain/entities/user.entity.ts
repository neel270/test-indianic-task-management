export interface User {
  id: string;
  name: string;
  email: string;
  password: string;
  role: 'admin' | 'user';
  isActive: boolean;
  profileImage?: string;
  createdAt: Date;
  updatedAt: Date;
}

export class UserEntity {
  constructor(
    public readonly id: string,
    public readonly name: string,
    public readonly email: string,
    public readonly password: string,
    public readonly role: 'admin' | 'user',
    public readonly isActive: boolean,
    public readonly profileImage?: string,
    public readonly createdAt: Date = new Date(),
    public readonly updatedAt: Date = new Date()
  ) {}

  static create(props: Omit<User, 'id' | 'createdAt' | 'updatedAt'>): UserEntity {
    return new UserEntity(
      '', // ID will be generated by the repository
      props.name,
      props.email,
      props.password,
      props.role,
      props.isActive,
      props.profileImage
    );
  }

  updateProfile(updates: Partial<Pick<User, 'name' | 'email' | 'profileImage'>>): UserEntity {
    return new UserEntity(
      this.id,
      updates.name ?? this.name,
      updates.email ?? this.email,
      this.password,
      this.role,
      this.isActive,
      updates.profileImage ?? this.profileImage,
      this.createdAt,
      new Date()
    );
  }

  changePassword(newPassword: string): UserEntity {
    return new UserEntity(
      this.id,
      this.name,
      this.email,
      newPassword,
      this.role,
      this.isActive,
      this.profileImage,
      this.createdAt,
      new Date()
    );
  }

  deactivate(): UserEntity {
    return new UserEntity(
      this.id,
      this.name,
      this.email,
      this.password,
      this.role,
      false,
      this.profileImage,
      this.createdAt,
      new Date()
    );
  }

  activate(): UserEntity {
    return new UserEntity(
      this.id,
      this.name,
      this.email,
      this.password,
      this.role,
      true,
      this.profileImage,
      this.createdAt,
      new Date()
    );
  }
}
